# -*- coding: utf-8 -*-
"""diabieties_predicted.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qBfaFzv-AAFWyZ7hACGhzyooZVsI0tzb
"""





""""Diabities Predection"

Importing libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""Uploading files

Data Collection
"""

df = pd.read_csv("/content/diabetes.csv")

df.head()

df.tail()

columns_with_zeroes = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']

for column in columns_with_zeroes:
    df[column].replace(0, np.nan, inplace=True)
    df[column].fillna(df[column].mean(), inplace=True)

df.head()

"""Feature Engg

"""

x = df.drop('Outcome',axis=1)
y = df['Outcome']



from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)

x_scaled

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x_scaled,y,test_size=0.2,random_state=50)

#model trainning complete
from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(x_train,y_train)

# make predictions on test data
y_pred = model.predict(x_test)
y_pred

from sklearn.metrics import accuracy_score

accuracy_logreg = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy_logreg)

#checking confusion matrix
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

#checking classification_report
from sklearn.metrics import classification_report

print("Classification Report:")
print(classification_report(y_test, y_pred))

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(x_train,y_train)

x_pred = rf.predict(x_test)

rf_pred = rf.predict(x_test)

rf_accuracy = accuracy_score(y_test, rf_pred)
print("Accuracy:", rf_accuracy)

rf_conf_matrix = confusion_matrix(y_test, rf_pred)
print("Confusion Matrix:")
print(rf_conf_matrix)

rf_report = classification_report(y_test, rf_pred)
print("Classification Report:")
print(rf_report)

print("Random Forest Accuracy")

# Create a confusion matrix
#rf_confusion_matrix = confusion_matrix(y_test, y_pred_rf)

# Create a heatmap of the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(rf_conf_matrix, annot=True, cmap="Blues")

# Add labels and title
plt.xlabel("Predicted labels")
plt.ylabel("True labels")
plt.title("Confusion Matrix")
plt.show()

print("Accuracy of Logistic Regression Algorith",accuracy_logreg*100)
print("Accuracy of Random Forest Algorith",rf_accuracy*100)

import pickle
model_filename = "rf_model.pkl"
with open(model_filename, 'wb') as file:
    pickle.dump(rf,file)

with open(model_filename, 'rb') as file:
    loaded_model = pickle.load(file)

def predect_diabetes(input_data):
  input_data_scaled = scaler.transform([input_data])
  prediction = loaded_model.predict(input_data_scaled)
  if prediction[0] == 0:
    print("The person is not diabetic")
  else:
    print("The person is diabetic")

input= [2,145,52,20,156,22.5,0.456,50]
predect_diabetes(input)

pip install gradio

import gradio as gr
import joblib as jb

model = jb.load('/content/rf_model.pkl')

def predict_diabetes(Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age):
  input_data =pd.DataFrame([[Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age]])
  columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']
  input_data_scaled = scaler.transform(input_data)
  predect_diabetes = model.predict(input_data_scaled)

  return "The person is not diabetic" if predect_diabetes[0] == 0 else "The person is diabetic"

predict_diabetes(2,145,52,20,156,22.5,0.456,50)

interface = gr.Interface(

    fn = predict_diabetes,

    title = "Diabetes Prediction",
    description = "Predict if a patient has diabetes or not",

    inputs = [
            gr.components.Number(label="Pregnancies"),
            gr.components.Number(label="Glucose"),
            gr.components.Number(label="BloodPressure"),
            gr.components.Number(label="SkinThickness"),
            gr.components.Number(label="Insulin"),
                             gr.components.Number(label="BMI"),
                             gr.components.Number(label="DiabetesPedigreeFunction"),
                             gr.components.Number(label="Age")
],

    outputs = gr.Textbox(label = "Prediction")

)

interface.launch()

